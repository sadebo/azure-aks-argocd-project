name: Deploy AKS + ArgoCD

on:
  workflow_dispatch: # manual trigger
  push:
    branches:
    - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev # GitHub environment (secrets stored here)

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    steps:
    # --- Checkout repo
    - name: Checkout repository
      uses: actions/checkout@v4

    # --- Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.9.5

    # --- Terraform Init + Apply
    - name: Terraform Init + Apply
      working-directory: terraform
      run: |
        terraform init -input=false
        terraform apply -auto-approve -input=false

    # --- Login to Azure
    - name: Azure Login
      run: |
        az login --service-principal \
          -u $ARM_CLIENT_ID \
          -p $ARM_CLIENT_SECRET \
          --tenant $ARM_TENANT_ID
        az account set --subscription $ARM_SUBSCRIPTION_ID

    # --- Build & Push App Image
    - name: Build & Push Flask App
      run: |
        az acr login --name parallelacr9875
        docker build -t parallelacr9875.azurecr.io/flask-app:v1 ./app
        docker push parallelacr9875.azurecr.io/flask-app:v1

    # --- Get AKS Credentials for kubectl
    - name: Get AKS Credentials
      run: |
        az aks get-credentials \
          --resource-group aks-rg \
          --name aks-demo \
          --overwrite-existing

    # --- Apply Bootstrap Addons
    - name: Apply Bootstrap Addons
      run: |
        # Cert-Manager must have CRDs first
        kubectl apply -f bootstrap/cert-manager-crds.yaml
        kubectl apply -f bootstrap/cert-manager.yaml
        kubectl apply -f bootstrap/ingress-nginx.yaml
        kubectl create namespace argocd || true
        kubectl apply -n argocd -f bootstrap/argocd-core.yaml

    # --- Wait for Ingress-NGINX rollout
    - name: Wait for Ingress-NGINX
      run: |
        kubectl rollout status deployment/ingress-nginx-controller \
          -n ingress-nginx --timeout=300s

    # --- Wait for Cert-Manager rollout
    - name: Wait for Cert-Manager
      run: |
        kubectl rollout status deployment/cert-manager \
          -n cert-manager --timeout=300s
        kubectl rollout status deployment/cert-manager-webhook \
          -n cert-manager --timeout=300s

    # --- Apply ClusterIssuer (after Cert-Manager is ready)
    - name: Apply ClusterIssuer
      run: |
        kubectl apply -f bootstrap/letsencrypt-clusterissuer.yaml

    # --- Wait for ArgoCD pods
    - name: Wait for ArgoCD
      run: |
        echo "Waiting for ArgoCD pods to be created..."
        for i in {1..30}; do
          if kubectl get pods -n argocd | grep argocd-server; then
            echo "ArgoCD pods found."
            break
          fi
          echo "ArgoCD pods not found yet... retrying in 10s"
          sleep 10
        done

        echo "Waiting for all ArgoCD pods in namespace to become ready..."
        kubectl wait --for=condition=ready pod \
          -n argocd --all --timeout=600s

    # --- Apply ArgoCD Ingress (after ArgoCD + ClusterIssuer are ready)
    - name: Apply ArgoCD Ingress
      run: |
        kubectl apply -f bootstrap/argocd-ingress.yaml
