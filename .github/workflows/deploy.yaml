name: Deploy AKS + ArgoCD

on:
  workflow_dispatch: # manual trigger
  push:
    branches:
    - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    steps:
    # --- Checkout repo
    - name: Checkout repository
      uses: actions/checkout@v4

    # --- Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.9.5

    # --- Terraform Init + Apply
    - name: Terraform Init + Apply
      working-directory: terraform
      run: |
        terraform init -input=false
        terraform apply -auto-approve -input=false

    # --- Login to Azure
    - name: Azure Login
      run: |
        az login --service-principal \
          -u $ARM_CLIENT_ID \
          -p $ARM_CLIENT_SECRET \
          --tenant $ARM_TENANT_ID
        az account set --subscription $ARM_SUBSCRIPTION_ID

    # --- Build & Push App Image (tagged with SHA + latest)
    - name: Build & Push Flask App
      run: |
        IMAGE_TAG=sha-${GITHUB_SHA::7}
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        az acr login --name parallelacr9875
        docker build -t parallelacr9875.azurecr.io/flask-app:$IMAGE_TAG \
                     -t parallelacr9875.azurecr.io/flask-app:latest ./app
        docker push parallelacr9875.azurecr.io/flask-app:$IMAGE_TAG
        docker push parallelacr9875.azurecr.io/flask-app:latest

    # --- Get AKS Credentials
    - name: Get AKS Credentials
      run: |
        az aks get-credentials \
          --resource-group aks-rg \
          --name aks-demo \
          --overwrite-existing

    # --- Apply Bootstrap Addons
    - name: Apply Bootstrap Addons
      run: |
        kubectl apply -f bootstrap/cert-manager-crds.yaml
        kubectl apply -f bootstrap/cert-manager.yaml
        kubectl apply -f bootstrap/ingress-nginx.yaml
        kubectl create namespace argocd || true
        kubectl apply -n argocd -f bootstrap/argocd-core.yaml

    # --- Patch ArgoCD server to run with --insecure
    - name: Patch ArgoCD server
      run: |
        kubectl -n argocd patch deployment argocd-server \
          --type='json' \
          -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/args", "value":["argocd-server","--insecure"]}]'

    # --- Wait for Ingress-NGINX rollout
    - name: Wait for Ingress-NGINX
      run: |
        kubectl rollout status deployment/ingress-nginx-controller \
          -n ingress-nginx --timeout=300s

    # --- Wait for Cert-Manager rollout
    - name: Wait for Cert-Manager
      run: |
        kubectl rollout status deployment/cert-manager \
          -n cert-manager --timeout=300s
        kubectl rollout status deployment/cert-manager-webhook \
          -n cert-manager --timeout=300s

    # --- Apply ClusterIssuer
    - name: Apply ClusterIssuer
      run: |
        kubectl apply -f bootstrap/letsencrypt-clusterissuer.yaml

    # --- Wait for ArgoCD CRDs
    - name: Wait for ArgoCD CRDs
      run: |
        kubectl wait --for=condition=Established crd/applications.argoproj.io --timeout=180s
        kubectl wait --for=condition=Established crd/appprojects.argoproj.io --timeout=180s

    # --- Wait for ArgoCD pods
    - name: Wait for ArgoCD
      run: |
        kubectl rollout status deploy/argocd-server -n argocd --timeout=600s

    # --- Apply ArgoCD Ingress
    - name: Apply ArgoCD Ingress
      run: |
        kubectl apply -f bootstrap/argocd-ingress.yaml

    # --- Fetch ArgoCD initial admin password
    - name: Fetch ArgoCD initial admin password
      id: fetch-pass
      run: |
        PASS=$(kubectl -n argocd get secret argocd-initial-admin-secret \
          -o jsonpath="{.data.password}" | base64 -d)
        echo "$PASS" > argocd-admin-password.txt
        echo "ARGOCD_PASS=$PASS" >> $GITHUB_ENV

    # --- Upload ArgoCD password
    - name: Upload ArgoCD password
      uses: actions/upload-artifact@v4
      with:
        name: argocd-admin-password
        path: argocd-admin-password.txt

    # --- Install ArgoCD CLI
    - name: Install ArgoCD CLI
      run: |
        curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.7.9/argocd-linux-amd64
        chmod +x /usr/local/bin/argocd

    # --- ArgoCD Login
    - name: ArgoCD Login
      run: |
        argocd login argocd.parallelservicesllc.com \
          --username admin \
          --password $ARGOCD_PASS \
          --grpc-web \
          --insecure

    # --- Register GitHub repo in ArgoCD
    - name: Register GitHub repo
      run: |
        argocd repo add https://github.com/sadebo/azure-aks-argocd-project.git \
          --username oauth2 \
          --password ${{ secrets.PAT_GITHUB }} \
          --grpc-web

    # --- Apply ArgoCD Projects
    - name: Apply ArgoCD Projects
      run: |
        kubectl apply -f argocd/projects/ -n argocd

    # --- Apply ArgoCD Applications
    - name: Apply ArgoCD Applications
      run: |
        kubectl apply -f argocd/applications/ -n argocd

    # --- Sync Flask App with new image tag
    - name: Sync Flask App
      run: |
        argocd app set flask-app \
          --helm-set image.repository=parallelacr9875.azurecr.io/flask-app \
          --helm-set image.tag=${IMAGE_TAG} \
          --grpc-web
        argocd app sync flask-app --grpc-web
